// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![cfg_attr(feature = "cargo-clippy", allow(too_many_arguments, type_complexity))]
#![cfg_attr(rustfmt, rustfmt_skip)]

extern crate ordered_float;
extern crate thrift;
extern crate try_from;

use ordered_float::OrderedFloat;
use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::From;
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;
use try_from::TryFrom;

use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

use base_one;
use base_two;

//
// Meal
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Meal {
  pub noodle: Option<base_one::Noodle>,
  pub ramen: Option<base_two::Ramen>,
}

impl Meal {
  pub fn new<F1, F2>(noodle: F1, ramen: F2) -> Meal where F1: Into<Option<base_one::Noodle>>, F2: Into<Option<base_two::Ramen>> {
    Meal {
      noodle: noodle.into(),
      ramen: ramen.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut TInputProtocol) -> thrift::Result<Meal> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<base_one::Noodle> = None;
    let mut f_2: Option<base_two::Ramen> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = base_one::Noodle::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let val = base_two::Ramen::read_from_in_protocol(i_prot)?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = Meal {
      noodle: f_1,
      ramen: f_2,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("Meal");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.noodle {
      o_prot.write_field_begin(&TFieldIdentifier::new("noodle", TType::Struct, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.ramen {
      o_prot.write_field_begin(&TFieldIdentifier::new("ramen", TType::Struct, 2))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for Meal {
  fn default() -> Self {
    Meal{
      noodle: None,
      ramen: None,
    }
  }
}

//
// Dessert
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum Dessert {
  Port(String),
  IceWine(String),
}

impl Dessert {
  pub fn read_from_in_protocol(i_prot: &mut TInputProtocol) -> thrift::Result<Dessert> {
    let mut ret: Option<Dessert> = None;
    let mut received_field_count = 0;
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          if ret.is_none() {
            ret = Some(Dessert::Port(val));
          }
          received_field_count += 1;
        },
        2 => {
          let val = i_prot.read_string()?;
          if ret.is_none() {
            ret = Some(Dessert::IceWine(val));
          }
          received_field_count += 1;
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
          received_field_count += 1;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    if received_field_count == 0 {
      Err(
        thrift::Error::Protocol(
          ProtocolError::new(
            ProtocolErrorKind::InvalidData,
            "received empty union from remote Dessert"
          )
        )
      )
    } else if received_field_count > 1 {
      Err(
        thrift::Error::Protocol(
          ProtocolError::new(
            ProtocolErrorKind::InvalidData,
            "received multiple fields for union from remote Dessert"
          )
        )
      )
    } else {
      Ok(ret.expect("return value should have been constructed"))
    }
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("Dessert");
    o_prot.write_struct_begin(&struct_ident)?;
    match *self {
      Dessert::Port(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("port", TType::String, 1))?;
        o_prot.write_string(f)?;
        o_prot.write_field_end()?;
      },
      Dessert::IceWine(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("iceWine", TType::String, 2))?;
        o_prot.write_string(f)?;
        o_prot.write_field_end()?;
      },
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

pub const WATER_BOILING_POINT: i32 = 100;

pub struct ConstTemperatureNames;
impl ConstTemperatureNames {
  pub fn const_value() -> BTreeMap<String, base_one::Temperature> {
    {
      let mut m: BTreeMap<String, base_one::Temperature> = BTreeMap::new();
      let k = "freezing".to_owned();
      let v = 0;
      m.insert(k, v);
      let k = "boiling".to_owned();
      let v = 100;
      m.insert(k, v);
      m
    }
  }
}

pub struct ConstMyConstNestedMap;
impl ConstMyConstNestedMap {
  pub fn const_value() -> BTreeMap<BTreeSet<i32>, BTreeMap<Vec<String>, String>> {
    {
      let mut m: BTreeMap<BTreeSet<i32>, BTreeMap<Vec<String>, String>> = BTreeMap::new();
      let k = {
        {
          let mut s: BTreeSet<i32> = BTreeSet::new();
          s.insert(0);
          s.insert(1);
          s.insert(2);
          s.insert(3);
          s
        }
      };
      let v = {
        {
          let mut m: BTreeMap<Vec<String>, String> = BTreeMap::new();
          let k = {
            {
              let mut l: Vec<String> = Vec::new();
              l.push("foo".to_owned());
              l
            }
          };
          let v = "bar".to_owned();
          m.insert(k, v);
          m
        }
      };
      m.insert(k, v);
      let k = {
        {
          let mut s: BTreeSet<i32> = BTreeSet::new();
          s.insert(20);
          s
        }
      };
      let v = {
        {
          let mut m: BTreeMap<Vec<String>, String> = BTreeMap::new();
          let k = {
            {
              let mut l: Vec<String> = Vec::new();
              l.push("nut".to_owned());
              l.push("ton".to_owned());
              l
            }
          };
          let v = "bar".to_owned();
          m.insert(k, v);
          m
        }
      };
      m.insert(k, v);
      let k = {
        {
          let mut s: BTreeSet<i32> = BTreeSet::new();
          s.insert(30);
          s.insert(40);
          s
        }
      };
      let v = {
        {
          let mut m: BTreeMap<Vec<String>, String> = BTreeMap::new();
          let k = {
            {
              let mut l: Vec<String> = Vec::new();
              l.push("bouncy".to_owned());
              l.push("tinkly".to_owned());
              l
            }
          };
          let v = "castle".to_owned();
          m.insert(k, v);
          m
        }
      };
      m.insert(k, v);
      m
    }
  }
}

pub struct ConstMyConstNestedList;
impl ConstMyConstNestedList {
  pub fn const_value() -> Vec<Vec<i32>> {
    {
      let mut l: Vec<Vec<i32>> = Vec::new();
      l.push(
        {
          let mut l: Vec<i32> = Vec::new();
          l.push(0);
          l.push(1);
          l.push(2);
          l
        }
      );
      l.push(
        {
          let mut l: Vec<i32> = Vec::new();
          l.push(3);
          l.push(4);
          l.push(5);
          l
        }
      );
      l.push(
        {
          let mut l: Vec<i32> = Vec::new();
          l.push(6);
          l.push(7);
          l.push(8);
          l
        }
      );
      l
    }
  }
}

pub struct ConstMyConstNestedSet;
impl ConstMyConstNestedSet {
  pub fn const_value() -> BTreeSet<BTreeSet<i32>> {
    {
      let mut s: BTreeSet<BTreeSet<i32>> = BTreeSet::new();
      s.insert(
        {
          let mut s: BTreeSet<i32> = BTreeSet::new();
          s.insert(0);
          s.insert(1);
          s.insert(2);
          s
        }
      );
      s.insert(
        {
          let mut s: BTreeSet<i32> = BTreeSet::new();
          s.insert(3);
          s.insert(4);
          s.insert(5);
          s
        }
      );
      s.insert(
        {
          let mut s: BTreeSet<i32> = BTreeSet::new();
          s.insert(6);
          s.insert(7);
          s.insert(8);
          s
        }
      );
      s
    }
  }
}

//
// MealService service client
//

pub trait TMealServiceSyncClient : base_two::TRamenServiceSyncClient {
  fn meal(&mut self) -> thrift::Result<Meal>;
}

pub trait TMealServiceSyncClientMarker {}

pub struct MealServiceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> MealServiceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> MealServiceSyncClient<IP, OP> {
    MealServiceSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for MealServiceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> TMealServiceSyncClientMarker for MealServiceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}
impl <IP, OP> base_two::TRamenServiceSyncClientMarker for MealServiceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}
impl <IP, OP> base_two::TNapkinServiceSyncClientMarker for MealServiceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + TMealServiceSyncClientMarker + base_two::TRamenServiceSyncClientMarker + base_two::TNapkinServiceSyncClientMarker> TMealServiceSyncClient for C {
  fn meal(&mut self) -> thrift::Result<Meal> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("meal", TMessageType::Call, self.sequence_number());
        let call_args = MealArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("meal", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = MealResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// MealService service processor
//

pub trait MealServiceSyncHandler : base_two::RamenServiceSyncHandler {
  fn handle_meal(&self) -> thrift::Result<Meal>;
}

pub struct MealServiceSyncProcessor<H: MealServiceSyncHandler> {
  handler: H,
}

impl <H: MealServiceSyncHandler> MealServiceSyncProcessor<H> {
  pub fn new(handler: H) -> MealServiceSyncProcessor<H> {
    MealServiceSyncProcessor {
      handler: handler,
    }
  }
  fn process_meal(&self, incoming_sequence_number: i32, i_prot: &mut TInputProtocol, o_prot: &mut TOutputProtocol) -> thrift::Result<()> {
    TMealServiceProcessFunctions::process_meal(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_ramen(&self, incoming_sequence_number: i32, i_prot: &mut TInputProtocol, o_prot: &mut TOutputProtocol) -> thrift::Result<()> {
    base_two::TRamenServiceProcessFunctions::process_ramen(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_napkin(&self, incoming_sequence_number: i32, i_prot: &mut TInputProtocol, o_prot: &mut TOutputProtocol) -> thrift::Result<()> {
    base_two::TNapkinServiceProcessFunctions::process_napkin(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct TMealServiceProcessFunctions;

impl TMealServiceProcessFunctions {
  pub fn process_meal<H: MealServiceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut TInputProtocol, o_prot: &mut TOutputProtocol) -> thrift::Result<()> {
    let _ = MealArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_meal() {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("meal", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = MealResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("meal", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.description()
              )
            };
            let message_ident = TMessageIdentifier::new("meal", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: MealServiceSyncHandler> TProcessor for MealServiceSyncProcessor<H> {
  fn process(&self, i_prot: &mut TInputProtocol, o_prot: &mut TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "meal" => {
        self.process_meal(message_ident.sequence_number, i_prot, o_prot)
      },
      "ramen" => {
        self.process_ramen(message_ident.sequence_number, i_prot, o_prot)
      },
      "napkin" => {
        self.process_napkin(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// MealArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct MealArgs {
}

impl MealArgs {
  fn read_from_in_protocol(i_prot: &mut TInputProtocol) -> thrift::Result<MealArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = MealArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("meal_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// MealResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct MealResult {
  result_value: Option<Meal>,
}

impl MealResult {
  fn read_from_in_protocol(i_prot: &mut TInputProtocol) -> thrift::Result<MealResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<Meal> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = Meal::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = MealResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("MealResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
  fn ok_or(self) -> thrift::Result<Meal> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for Meal"
          )
        )
      )
    }
  }
}

